Certainly! Here's an example of how you can define a Groovy function with parameters to invoke the SonarQube API for lines of code coverage metrics and then use it in a declarative Jenkins pipeline using an HTTP request:

First, define the Groovy function script (e.g., `getSonarMetrics.groovy`):

```groovy
def getLinesOfCodeMetrics(String sonarQubeUrl, String sonarQubeToken, String projectName, String metricKey) {
    def client = new groovyx.net.http.RESTClient(sonarQubeUrl)

    def response = client.get(
        path: "/api/measures/component",
        query: [componentKey: projectName, metricKeys: metricKey],
        headers: ['Authorization': "Bearer ${sonarQubeToken}"]
    )

    if (response.status == 200) {
        def measures = response.data.component.measures
        def linesOfCodeMetric = measures.find { it.metric == metricKey }

        if (linesOfCodeMetric) {
            return linesOfCodeMetric.value
        } else {
            return "Lines of Code metric not found for the project."
        }
    } else {
        return "Error: ${response.status} - ${response.statusText}"
    }
}
```

Next, use the function in your declarative Jenkins pipeline (Jenkinsfile):

```groovy
@Library('your-shared-library') _

pipeline {
    agent any

    stages {
        stage('Checkout') {
            steps {
                // Checkout your code repository here
            }
        }

        stage('Build') {
            steps {
                // Build your code here
            }
        }

        stage('Run Tests') {
            steps {
                // Run your tests here
            }
        }

        stage('Retrieve and Use LOC Metrics') {
            steps {
                script {
                    def sonarQubeUrl = 'https://your-sonarqube-instance.com'
                    def sonarQubeToken = 'your-sonarqube-token'
                    def projectName = 'your-project-key'
                    def metricKey = 'ncloc' // Metric key for lines of code

                    def metricsValue = library.getSonarMetrics.getLinesOfCodeMetrics(sonarQubeUrl, sonarQubeToken, projectName, metricKey)
                    echo "Lines of Code: ${metricsValue}"

                    // Additional logic based on metricsValue
                }
            }
        }
    }
}
```

In this example, `your-shared-library` is a placeholder for the name of the shared library where you have placed the `getSonarMetrics.groovy` script. Make sure to replace the placeholders `'https://your-sonarqube-instance.com'`, `'your-sonarqube-token'`, `'your-project-key'`, and `'ncloc'` with your actual SonarQube details.

This approach separates the functionality into a reusable script and allows you to call the function in your Jenkins pipeline, promoting modularity and maintainability.
